:mod:`suite2p.detection.sparsedetect`
=====================================

.. py:module:: suite2p.detection.sparsedetect


Module Contents
---------------

.. function:: my_max(a, b)


.. function:: my_sum(a, b)


.. function:: get_mov(ops)


.. function:: get_sdmov(mov, ops)


.. function:: get_overlaps(stat, ops)

   computes overlapping pixels from ROIs in stat
   inputs:
       stat, Ly, Lx
   outputs:
       stat
       assigned to stat: overlap: (npix,1) boolean whether or not pixels also in another cell


.. function:: remove_overlaps(stat, ops, Ly, Lx)

   removes overlaps iteratively


.. function:: two_comps(mpix0, lam, Th2)


.. function:: neuropil_subtraction(mov, lx)


.. function:: threshold_reduce(movu, Th2)


.. function:: downsample(mov, flag=True)


.. function:: multiscale_mask(ypix0, xpix0, lam0, Lyp, Lxp)


.. function:: add_square(yi, xi, lx, Ly, Lx)


.. function:: extend_mask(ypix, xpix, lam, Ly, Lx)


.. function:: extendROI(ypix, xpix, Ly, Lx, niter=1)


.. function:: iter_extend(ypix, xpix, Ucell, Lyc, Lxc, iframes)


.. function:: square_conv2(mov, lx)


.. function:: sparsery(ops)


.. function:: circleMask(d0)

   creates array with indices which are the radius of that x,y point
   inputs:
       d0 (patch of (-d0,d0+1) over which radius computed
   outputs:
       rs: array (2*d0+1,2*d0+1) of radii
       dx,dy: indices in rs where the radius is less than d0


.. function:: get_stat(ops, stat)

   computes statistics of cells found using sourcery
   inputs:
       Ly, Lx, d0, mPix (pixels,ncells), mLam (weights,ncells), codes (ncells,nsvd), Ucell (nsvd,Ly,Lx)
   outputs:
       stat
       assigned to stat: ipix, ypix, xpix, med, npix, lam, footprint, compact, aspect_ratio, ellipse


